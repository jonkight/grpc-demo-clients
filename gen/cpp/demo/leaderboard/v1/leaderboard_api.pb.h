// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo/leaderboard/v1/leaderboard_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "demo/leaderboard/v1/leaderboard.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
namespace demo {
namespace leaderboard {
namespace v1 {
class CreateLeaderboardRequest;
class CreateLeaderboardRequestDefaultTypeInternal;
extern CreateLeaderboardRequestDefaultTypeInternal _CreateLeaderboardRequest_default_instance_;
class CreateLeaderboardResponse;
class CreateLeaderboardResponseDefaultTypeInternal;
extern CreateLeaderboardResponseDefaultTypeInternal _CreateLeaderboardResponse_default_instance_;
class DeleteLeaderboardRequest;
class DeleteLeaderboardRequestDefaultTypeInternal;
extern DeleteLeaderboardRequestDefaultTypeInternal _DeleteLeaderboardRequest_default_instance_;
class DeleteLeaderboardResponse;
class DeleteLeaderboardResponseDefaultTypeInternal;
extern DeleteLeaderboardResponseDefaultTypeInternal _DeleteLeaderboardResponse_default_instance_;
class GetLeaderboardRequest;
class GetLeaderboardRequestDefaultTypeInternal;
extern GetLeaderboardRequestDefaultTypeInternal _GetLeaderboardRequest_default_instance_;
class GetLeaderboardResponse;
class GetLeaderboardResponseDefaultTypeInternal;
extern GetLeaderboardResponseDefaultTypeInternal _GetLeaderboardResponse_default_instance_;
class GetScoresRequest;
class GetScoresRequestDefaultTypeInternal;
extern GetScoresRequestDefaultTypeInternal _GetScoresRequest_default_instance_;
class GetScoresResponse;
class GetScoresResponseDefaultTypeInternal;
extern GetScoresResponseDefaultTypeInternal _GetScoresResponse_default_instance_;
class ResetScoresRequest;
class ResetScoresRequestDefaultTypeInternal;
extern ResetScoresRequestDefaultTypeInternal _ResetScoresRequest_default_instance_;
class ResetScoresResponse;
class ResetScoresResponseDefaultTypeInternal;
extern ResetScoresResponseDefaultTypeInternal _ResetScoresResponse_default_instance_;
class SubmitScoresRequest;
class SubmitScoresRequestDefaultTypeInternal;
extern SubmitScoresRequestDefaultTypeInternal _SubmitScoresRequest_default_instance_;
class SubmitScoresResponse;
class SubmitScoresResponseDefaultTypeInternal;
extern SubmitScoresResponseDefaultTypeInternal _SubmitScoresResponse_default_instance_;
}  // namespace v1
}  // namespace leaderboard
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::leaderboard::v1::CreateLeaderboardRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::CreateLeaderboardRequest>(Arena*);
template<> ::demo::leaderboard::v1::CreateLeaderboardResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::CreateLeaderboardResponse>(Arena*);
template<> ::demo::leaderboard::v1::DeleteLeaderboardRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::DeleteLeaderboardRequest>(Arena*);
template<> ::demo::leaderboard::v1::DeleteLeaderboardResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::DeleteLeaderboardResponse>(Arena*);
template<> ::demo::leaderboard::v1::GetLeaderboardRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::GetLeaderboardRequest>(Arena*);
template<> ::demo::leaderboard::v1::GetLeaderboardResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::GetLeaderboardResponse>(Arena*);
template<> ::demo::leaderboard::v1::GetScoresRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::GetScoresRequest>(Arena*);
template<> ::demo::leaderboard::v1::GetScoresResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::GetScoresResponse>(Arena*);
template<> ::demo::leaderboard::v1::ResetScoresRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::ResetScoresRequest>(Arena*);
template<> ::demo::leaderboard::v1::ResetScoresResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::ResetScoresResponse>(Arena*);
template<> ::demo::leaderboard::v1::SubmitScoresRequest* Arena::CreateMaybeMessage<::demo::leaderboard::v1::SubmitScoresRequest>(Arena*);
template<> ::demo::leaderboard::v1::SubmitScoresResponse* Arena::CreateMaybeMessage<::demo::leaderboard::v1::SubmitScoresResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {
namespace leaderboard {
namespace v1 {

// ===================================================================

class CreateLeaderboardRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.CreateLeaderboardRequest) */ {
 public:
  CreateLeaderboardRequest();
  virtual ~CreateLeaderboardRequest();

  CreateLeaderboardRequest(const CreateLeaderboardRequest& from);
  CreateLeaderboardRequest(CreateLeaderboardRequest&& from) noexcept
    : CreateLeaderboardRequest() {
    *this = ::std::move(from);
  }

  inline CreateLeaderboardRequest& operator=(const CreateLeaderboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLeaderboardRequest& operator=(CreateLeaderboardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLeaderboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLeaderboardRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLeaderboardRequest*>(
               &_CreateLeaderboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateLeaderboardRequest& a, CreateLeaderboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLeaderboardRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLeaderboardRequest* New() const final {
    return CreateMaybeMessage<CreateLeaderboardRequest>(nullptr);
  }

  CreateLeaderboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLeaderboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLeaderboardRequest& from);
  void MergeFrom(const CreateLeaderboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLeaderboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.CreateLeaderboardRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardFieldNumber = 1,
  };
  // .demo.leaderboard.v1.Leaderboard leaderboard = 1;
  bool has_leaderboard() const;
  private:
  bool _internal_has_leaderboard() const;
  public:
  void clear_leaderboard();
  const ::demo::leaderboard::v1::Leaderboard& leaderboard() const;
  ::demo::leaderboard::v1::Leaderboard* release_leaderboard();
  ::demo::leaderboard::v1::Leaderboard* mutable_leaderboard();
  void set_allocated_leaderboard(::demo::leaderboard::v1::Leaderboard* leaderboard);
  private:
  const ::demo::leaderboard::v1::Leaderboard& _internal_leaderboard() const;
  ::demo::leaderboard::v1::Leaderboard* _internal_mutable_leaderboard();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.CreateLeaderboardRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::leaderboard::v1::Leaderboard* leaderboard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateLeaderboardResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.CreateLeaderboardResponse) */ {
 public:
  CreateLeaderboardResponse();
  virtual ~CreateLeaderboardResponse();

  CreateLeaderboardResponse(const CreateLeaderboardResponse& from);
  CreateLeaderboardResponse(CreateLeaderboardResponse&& from) noexcept
    : CreateLeaderboardResponse() {
    *this = ::std::move(from);
  }

  inline CreateLeaderboardResponse& operator=(const CreateLeaderboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLeaderboardResponse& operator=(CreateLeaderboardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLeaderboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLeaderboardResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLeaderboardResponse*>(
               &_CreateLeaderboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateLeaderboardResponse& a, CreateLeaderboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLeaderboardResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLeaderboardResponse* New() const final {
    return CreateMaybeMessage<CreateLeaderboardResponse>(nullptr);
  }

  CreateLeaderboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLeaderboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLeaderboardResponse& from);
  void MergeFrom(const CreateLeaderboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLeaderboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.CreateLeaderboardResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.CreateLeaderboardResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLeaderboardRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.GetLeaderboardRequest) */ {
 public:
  GetLeaderboardRequest();
  virtual ~GetLeaderboardRequest();

  GetLeaderboardRequest(const GetLeaderboardRequest& from);
  GetLeaderboardRequest(GetLeaderboardRequest&& from) noexcept
    : GetLeaderboardRequest() {
    *this = ::std::move(from);
  }

  inline GetLeaderboardRequest& operator=(const GetLeaderboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaderboardRequest& operator=(GetLeaderboardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLeaderboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaderboardRequest* internal_default_instance() {
    return reinterpret_cast<const GetLeaderboardRequest*>(
               &_GetLeaderboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLeaderboardRequest& a, GetLeaderboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaderboardRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLeaderboardRequest* New() const final {
    return CreateMaybeMessage<GetLeaderboardRequest>(nullptr);
  }

  GetLeaderboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaderboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLeaderboardRequest& from);
  void MergeFrom(const GetLeaderboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.GetLeaderboardRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.GetLeaderboardRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLeaderboardResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.GetLeaderboardResponse) */ {
 public:
  GetLeaderboardResponse();
  virtual ~GetLeaderboardResponse();

  GetLeaderboardResponse(const GetLeaderboardResponse& from);
  GetLeaderboardResponse(GetLeaderboardResponse&& from) noexcept
    : GetLeaderboardResponse() {
    *this = ::std::move(from);
  }

  inline GetLeaderboardResponse& operator=(const GetLeaderboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLeaderboardResponse& operator=(GetLeaderboardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLeaderboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaderboardResponse* internal_default_instance() {
    return reinterpret_cast<const GetLeaderboardResponse*>(
               &_GetLeaderboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetLeaderboardResponse& a, GetLeaderboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLeaderboardResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLeaderboardResponse* New() const final {
    return CreateMaybeMessage<GetLeaderboardResponse>(nullptr);
  }

  GetLeaderboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaderboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLeaderboardResponse& from);
  void MergeFrom(const GetLeaderboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.GetLeaderboardResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardFieldNumber = 1,
  };
  // .demo.leaderboard.v1.Leaderboard leaderboard = 1;
  bool has_leaderboard() const;
  private:
  bool _internal_has_leaderboard() const;
  public:
  void clear_leaderboard();
  const ::demo::leaderboard::v1::Leaderboard& leaderboard() const;
  ::demo::leaderboard::v1::Leaderboard* release_leaderboard();
  ::demo::leaderboard::v1::Leaderboard* mutable_leaderboard();
  void set_allocated_leaderboard(::demo::leaderboard::v1::Leaderboard* leaderboard);
  private:
  const ::demo::leaderboard::v1::Leaderboard& _internal_leaderboard() const;
  ::demo::leaderboard::v1::Leaderboard* _internal_mutable_leaderboard();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.GetLeaderboardResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::leaderboard::v1::Leaderboard* leaderboard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteLeaderboardRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.DeleteLeaderboardRequest) */ {
 public:
  DeleteLeaderboardRequest();
  virtual ~DeleteLeaderboardRequest();

  DeleteLeaderboardRequest(const DeleteLeaderboardRequest& from);
  DeleteLeaderboardRequest(DeleteLeaderboardRequest&& from) noexcept
    : DeleteLeaderboardRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLeaderboardRequest& operator=(const DeleteLeaderboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLeaderboardRequest& operator=(DeleteLeaderboardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLeaderboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLeaderboardRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLeaderboardRequest*>(
               &_DeleteLeaderboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteLeaderboardRequest& a, DeleteLeaderboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLeaderboardRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLeaderboardRequest* New() const final {
    return CreateMaybeMessage<DeleteLeaderboardRequest>(nullptr);
  }

  DeleteLeaderboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLeaderboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLeaderboardRequest& from);
  void MergeFrom(const DeleteLeaderboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLeaderboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.DeleteLeaderboardRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.DeleteLeaderboardRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteLeaderboardResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.DeleteLeaderboardResponse) */ {
 public:
  DeleteLeaderboardResponse();
  virtual ~DeleteLeaderboardResponse();

  DeleteLeaderboardResponse(const DeleteLeaderboardResponse& from);
  DeleteLeaderboardResponse(DeleteLeaderboardResponse&& from) noexcept
    : DeleteLeaderboardResponse() {
    *this = ::std::move(from);
  }

  inline DeleteLeaderboardResponse& operator=(const DeleteLeaderboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLeaderboardResponse& operator=(DeleteLeaderboardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLeaderboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLeaderboardResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLeaderboardResponse*>(
               &_DeleteLeaderboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteLeaderboardResponse& a, DeleteLeaderboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLeaderboardResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLeaderboardResponse* New() const final {
    return CreateMaybeMessage<DeleteLeaderboardResponse>(nullptr);
  }

  DeleteLeaderboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLeaderboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLeaderboardResponse& from);
  void MergeFrom(const DeleteLeaderboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLeaderboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.DeleteLeaderboardResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.DeleteLeaderboardResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetScoresRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.GetScoresRequest) */ {
 public:
  GetScoresRequest();
  virtual ~GetScoresRequest();

  GetScoresRequest(const GetScoresRequest& from);
  GetScoresRequest(GetScoresRequest&& from) noexcept
    : GetScoresRequest() {
    *this = ::std::move(from);
  }

  inline GetScoresRequest& operator=(const GetScoresRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScoresRequest& operator=(GetScoresRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScoresRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScoresRequest* internal_default_instance() {
    return reinterpret_cast<const GetScoresRequest*>(
               &_GetScoresRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetScoresRequest& a, GetScoresRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScoresRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScoresRequest* New() const final {
    return CreateMaybeMessage<GetScoresRequest>(nullptr);
  }

  GetScoresRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScoresRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScoresRequest& from);
  void MergeFrom(const GetScoresRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScoresRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.GetScoresRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.GetScoresRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetScoresResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.GetScoresResponse) */ {
 public:
  GetScoresResponse();
  virtual ~GetScoresResponse();

  GetScoresResponse(const GetScoresResponse& from);
  GetScoresResponse(GetScoresResponse&& from) noexcept
    : GetScoresResponse() {
    *this = ::std::move(from);
  }

  inline GetScoresResponse& operator=(const GetScoresResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScoresResponse& operator=(GetScoresResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScoresResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScoresResponse* internal_default_instance() {
    return reinterpret_cast<const GetScoresResponse*>(
               &_GetScoresResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetScoresResponse& a, GetScoresResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScoresResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScoresResponse* New() const final {
    return CreateMaybeMessage<GetScoresResponse>(nullptr);
  }

  GetScoresResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScoresResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScoresResponse& from);
  void MergeFrom(const GetScoresResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScoresResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.GetScoresResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankingsFieldNumber = 1,
  };
  // repeated .demo.leaderboard.v1.LeaderboardScore rankings = 1;
  int rankings_size() const;
  private:
  int _internal_rankings_size() const;
  public:
  void clear_rankings();
  ::demo::leaderboard::v1::LeaderboardScore* mutable_rankings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::leaderboard::v1::LeaderboardScore >*
      mutable_rankings();
  private:
  const ::demo::leaderboard::v1::LeaderboardScore& _internal_rankings(int index) const;
  ::demo::leaderboard::v1::LeaderboardScore* _internal_add_rankings();
  public:
  const ::demo::leaderboard::v1::LeaderboardScore& rankings(int index) const;
  ::demo::leaderboard::v1::LeaderboardScore* add_rankings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::leaderboard::v1::LeaderboardScore >&
      rankings() const;

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.GetScoresResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::leaderboard::v1::LeaderboardScore > rankings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SubmitScoresRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.SubmitScoresRequest) */ {
 public:
  SubmitScoresRequest();
  virtual ~SubmitScoresRequest();

  SubmitScoresRequest(const SubmitScoresRequest& from);
  SubmitScoresRequest(SubmitScoresRequest&& from) noexcept
    : SubmitScoresRequest() {
    *this = ::std::move(from);
  }

  inline SubmitScoresRequest& operator=(const SubmitScoresRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitScoresRequest& operator=(SubmitScoresRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitScoresRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitScoresRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitScoresRequest*>(
               &_SubmitScoresRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubmitScoresRequest& a, SubmitScoresRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitScoresRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitScoresRequest* New() const final {
    return CreateMaybeMessage<SubmitScoresRequest>(nullptr);
  }

  SubmitScoresRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitScoresRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitScoresRequest& from);
  void MergeFrom(const SubmitScoresRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitScoresRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.SubmitScoresRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
  };
  // .demo.leaderboard.v1.LeaderboardScore score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  const ::demo::leaderboard::v1::LeaderboardScore& score() const;
  ::demo::leaderboard::v1::LeaderboardScore* release_score();
  ::demo::leaderboard::v1::LeaderboardScore* mutable_score();
  void set_allocated_score(::demo::leaderboard::v1::LeaderboardScore* score);
  private:
  const ::demo::leaderboard::v1::LeaderboardScore& _internal_score() const;
  ::demo::leaderboard::v1::LeaderboardScore* _internal_mutable_score();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.SubmitScoresRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::leaderboard::v1::LeaderboardScore* score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SubmitScoresResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.SubmitScoresResponse) */ {
 public:
  SubmitScoresResponse();
  virtual ~SubmitScoresResponse();

  SubmitScoresResponse(const SubmitScoresResponse& from);
  SubmitScoresResponse(SubmitScoresResponse&& from) noexcept
    : SubmitScoresResponse() {
    *this = ::std::move(from);
  }

  inline SubmitScoresResponse& operator=(const SubmitScoresResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitScoresResponse& operator=(SubmitScoresResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitScoresResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitScoresResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitScoresResponse*>(
               &_SubmitScoresResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubmitScoresResponse& a, SubmitScoresResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitScoresResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitScoresResponse* New() const final {
    return CreateMaybeMessage<SubmitScoresResponse>(nullptr);
  }

  SubmitScoresResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitScoresResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitScoresResponse& from);
  void MergeFrom(const SubmitScoresResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitScoresResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.SubmitScoresResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.SubmitScoresResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ResetScoresRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.ResetScoresRequest) */ {
 public:
  ResetScoresRequest();
  virtual ~ResetScoresRequest();

  ResetScoresRequest(const ResetScoresRequest& from);
  ResetScoresRequest(ResetScoresRequest&& from) noexcept
    : ResetScoresRequest() {
    *this = ::std::move(from);
  }

  inline ResetScoresRequest& operator=(const ResetScoresRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetScoresRequest& operator=(ResetScoresRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetScoresRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetScoresRequest* internal_default_instance() {
    return reinterpret_cast<const ResetScoresRequest*>(
               &_ResetScoresRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResetScoresRequest& a, ResetScoresRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetScoresRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetScoresRequest* New() const final {
    return CreateMaybeMessage<ResetScoresRequest>(nullptr);
  }

  ResetScoresRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetScoresRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetScoresRequest& from);
  void MergeFrom(const ResetScoresRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetScoresRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.ResetScoresRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.ResetScoresRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ResetScoresResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.ResetScoresResponse) */ {
 public:
  ResetScoresResponse();
  virtual ~ResetScoresResponse();

  ResetScoresResponse(const ResetScoresResponse& from);
  ResetScoresResponse(ResetScoresResponse&& from) noexcept
    : ResetScoresResponse() {
    *this = ::std::move(from);
  }

  inline ResetScoresResponse& operator=(const ResetScoresResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetScoresResponse& operator=(ResetScoresResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetScoresResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetScoresResponse* internal_default_instance() {
    return reinterpret_cast<const ResetScoresResponse*>(
               &_ResetScoresResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ResetScoresResponse& a, ResetScoresResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetScoresResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetScoresResponse* New() const final {
    return CreateMaybeMessage<ResetScoresResponse>(nullptr);
  }

  ResetScoresResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetScoresResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetScoresResponse& from);
  void MergeFrom(const ResetScoresResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetScoresResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.ResetScoresResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.ResetScoresResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateLeaderboardRequest

// .demo.leaderboard.v1.Leaderboard leaderboard = 1;
inline bool CreateLeaderboardRequest::_internal_has_leaderboard() const {
  return this != internal_default_instance() && leaderboard_ != nullptr;
}
inline bool CreateLeaderboardRequest::has_leaderboard() const {
  return _internal_has_leaderboard();
}
inline const ::demo::leaderboard::v1::Leaderboard& CreateLeaderboardRequest::_internal_leaderboard() const {
  const ::demo::leaderboard::v1::Leaderboard* p = leaderboard_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::leaderboard::v1::Leaderboard*>(
      &::demo::leaderboard::v1::_Leaderboard_default_instance_);
}
inline const ::demo::leaderboard::v1::Leaderboard& CreateLeaderboardRequest::leaderboard() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.CreateLeaderboardRequest.leaderboard)
  return _internal_leaderboard();
}
inline ::demo::leaderboard::v1::Leaderboard* CreateLeaderboardRequest::release_leaderboard() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.CreateLeaderboardRequest.leaderboard)
  
  ::demo::leaderboard::v1::Leaderboard* temp = leaderboard_;
  leaderboard_ = nullptr;
  return temp;
}
inline ::demo::leaderboard::v1::Leaderboard* CreateLeaderboardRequest::_internal_mutable_leaderboard() {
  
  if (leaderboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::leaderboard::v1::Leaderboard>(GetArenaNoVirtual());
    leaderboard_ = p;
  }
  return leaderboard_;
}
inline ::demo::leaderboard::v1::Leaderboard* CreateLeaderboardRequest::mutable_leaderboard() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.CreateLeaderboardRequest.leaderboard)
  return _internal_mutable_leaderboard();
}
inline void CreateLeaderboardRequest::set_allocated_leaderboard(::demo::leaderboard::v1::Leaderboard* leaderboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaderboard_);
  }
  if (leaderboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaderboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaderboard, submessage_arena);
    }
    
  } else {
    
  }
  leaderboard_ = leaderboard;
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.CreateLeaderboardRequest.leaderboard)
}

// -------------------------------------------------------------------

// CreateLeaderboardResponse

// -------------------------------------------------------------------

// GetLeaderboardRequest

// string leaderboard_id = 1;
inline void GetLeaderboardRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLeaderboardRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void GetLeaderboardRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
}
inline std::string* GetLeaderboardRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& GetLeaderboardRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.GetNoArena();
}
inline void GetLeaderboardRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLeaderboardRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
}
inline void GetLeaderboardRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
}
inline void GetLeaderboardRequest::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
}
inline std::string* GetLeaderboardRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLeaderboardRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLeaderboardRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.GetLeaderboardRequest.leaderboard_id)
}

// -------------------------------------------------------------------

// GetLeaderboardResponse

// .demo.leaderboard.v1.Leaderboard leaderboard = 1;
inline bool GetLeaderboardResponse::_internal_has_leaderboard() const {
  return this != internal_default_instance() && leaderboard_ != nullptr;
}
inline bool GetLeaderboardResponse::has_leaderboard() const {
  return _internal_has_leaderboard();
}
inline const ::demo::leaderboard::v1::Leaderboard& GetLeaderboardResponse::_internal_leaderboard() const {
  const ::demo::leaderboard::v1::Leaderboard* p = leaderboard_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::leaderboard::v1::Leaderboard*>(
      &::demo::leaderboard::v1::_Leaderboard_default_instance_);
}
inline const ::demo::leaderboard::v1::Leaderboard& GetLeaderboardResponse::leaderboard() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.GetLeaderboardResponse.leaderboard)
  return _internal_leaderboard();
}
inline ::demo::leaderboard::v1::Leaderboard* GetLeaderboardResponse::release_leaderboard() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.GetLeaderboardResponse.leaderboard)
  
  ::demo::leaderboard::v1::Leaderboard* temp = leaderboard_;
  leaderboard_ = nullptr;
  return temp;
}
inline ::demo::leaderboard::v1::Leaderboard* GetLeaderboardResponse::_internal_mutable_leaderboard() {
  
  if (leaderboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::leaderboard::v1::Leaderboard>(GetArenaNoVirtual());
    leaderboard_ = p;
  }
  return leaderboard_;
}
inline ::demo::leaderboard::v1::Leaderboard* GetLeaderboardResponse::mutable_leaderboard() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.GetLeaderboardResponse.leaderboard)
  return _internal_mutable_leaderboard();
}
inline void GetLeaderboardResponse::set_allocated_leaderboard(::demo::leaderboard::v1::Leaderboard* leaderboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaderboard_);
  }
  if (leaderboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaderboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaderboard, submessage_arena);
    }
    
  } else {
    
  }
  leaderboard_ = leaderboard;
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.GetLeaderboardResponse.leaderboard)
}

// -------------------------------------------------------------------

// DeleteLeaderboardRequest

// string leaderboard_id = 1;
inline void DeleteLeaderboardRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteLeaderboardRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void DeleteLeaderboardRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
}
inline std::string* DeleteLeaderboardRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& DeleteLeaderboardRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.GetNoArena();
}
inline void DeleteLeaderboardRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteLeaderboardRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
}
inline void DeleteLeaderboardRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
}
inline void DeleteLeaderboardRequest::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
}
inline std::string* DeleteLeaderboardRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteLeaderboardRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteLeaderboardRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.DeleteLeaderboardRequest.leaderboard_id)
}

// -------------------------------------------------------------------

// DeleteLeaderboardResponse

// -------------------------------------------------------------------

// GetScoresRequest

// string leaderboard_id = 1;
inline void GetScoresRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetScoresRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void GetScoresRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
}
inline std::string* GetScoresRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& GetScoresRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.GetNoArena();
}
inline void GetScoresRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetScoresRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
}
inline void GetScoresRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
}
inline void GetScoresRequest::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
}
inline std::string* GetScoresRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetScoresRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetScoresRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.GetScoresRequest.leaderboard_id)
}

// -------------------------------------------------------------------

// GetScoresResponse

// repeated .demo.leaderboard.v1.LeaderboardScore rankings = 1;
inline int GetScoresResponse::_internal_rankings_size() const {
  return rankings_.size();
}
inline int GetScoresResponse::rankings_size() const {
  return _internal_rankings_size();
}
inline ::demo::leaderboard::v1::LeaderboardScore* GetScoresResponse::mutable_rankings(int index) {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.GetScoresResponse.rankings)
  return rankings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::leaderboard::v1::LeaderboardScore >*
GetScoresResponse::mutable_rankings() {
  // @@protoc_insertion_point(field_mutable_list:demo.leaderboard.v1.GetScoresResponse.rankings)
  return &rankings_;
}
inline const ::demo::leaderboard::v1::LeaderboardScore& GetScoresResponse::_internal_rankings(int index) const {
  return rankings_.Get(index);
}
inline const ::demo::leaderboard::v1::LeaderboardScore& GetScoresResponse::rankings(int index) const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.GetScoresResponse.rankings)
  return _internal_rankings(index);
}
inline ::demo::leaderboard::v1::LeaderboardScore* GetScoresResponse::_internal_add_rankings() {
  return rankings_.Add();
}
inline ::demo::leaderboard::v1::LeaderboardScore* GetScoresResponse::add_rankings() {
  // @@protoc_insertion_point(field_add:demo.leaderboard.v1.GetScoresResponse.rankings)
  return _internal_add_rankings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::leaderboard::v1::LeaderboardScore >&
GetScoresResponse::rankings() const {
  // @@protoc_insertion_point(field_list:demo.leaderboard.v1.GetScoresResponse.rankings)
  return rankings_;
}

// -------------------------------------------------------------------

// SubmitScoresRequest

// .demo.leaderboard.v1.LeaderboardScore score = 1;
inline bool SubmitScoresRequest::_internal_has_score() const {
  return this != internal_default_instance() && score_ != nullptr;
}
inline bool SubmitScoresRequest::has_score() const {
  return _internal_has_score();
}
inline const ::demo::leaderboard::v1::LeaderboardScore& SubmitScoresRequest::_internal_score() const {
  const ::demo::leaderboard::v1::LeaderboardScore* p = score_;
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::leaderboard::v1::LeaderboardScore*>(
      &::demo::leaderboard::v1::_LeaderboardScore_default_instance_);
}
inline const ::demo::leaderboard::v1::LeaderboardScore& SubmitScoresRequest::score() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.SubmitScoresRequest.score)
  return _internal_score();
}
inline ::demo::leaderboard::v1::LeaderboardScore* SubmitScoresRequest::release_score() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.SubmitScoresRequest.score)
  
  ::demo::leaderboard::v1::LeaderboardScore* temp = score_;
  score_ = nullptr;
  return temp;
}
inline ::demo::leaderboard::v1::LeaderboardScore* SubmitScoresRequest::_internal_mutable_score() {
  
  if (score_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::leaderboard::v1::LeaderboardScore>(GetArenaNoVirtual());
    score_ = p;
  }
  return score_;
}
inline ::demo::leaderboard::v1::LeaderboardScore* SubmitScoresRequest::mutable_score() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.SubmitScoresRequest.score)
  return _internal_mutable_score();
}
inline void SubmitScoresRequest::set_allocated_score(::demo::leaderboard::v1::LeaderboardScore* score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(score_);
  }
  if (score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score, submessage_arena);
    }
    
  } else {
    
  }
  score_ = score;
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.SubmitScoresRequest.score)
}

// -------------------------------------------------------------------

// SubmitScoresResponse

// -------------------------------------------------------------------

// ResetScoresRequest

// string leaderboard_id = 1;
inline void ResetScoresRequest::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetScoresRequest::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void ResetScoresRequest::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
}
inline std::string* ResetScoresRequest::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& ResetScoresRequest::_internal_leaderboard_id() const {
  return leaderboard_id_.GetNoArena();
}
inline void ResetScoresRequest::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetScoresRequest::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
}
inline void ResetScoresRequest::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
}
inline void ResetScoresRequest::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
}
inline std::string* ResetScoresRequest::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetScoresRequest::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetScoresRequest::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.ResetScoresRequest.leaderboard_id)
}

// -------------------------------------------------------------------

// ResetScoresResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace leaderboard
}  // namespace demo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto
