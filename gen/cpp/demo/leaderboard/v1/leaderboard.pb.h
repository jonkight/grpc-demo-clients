// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo/leaderboard/v1/leaderboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2fleaderboard_2fv1_2fleaderboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_2eproto;
namespace demo {
namespace leaderboard {
namespace v1 {
class Leaderboard;
class LeaderboardDefaultTypeInternal;
extern LeaderboardDefaultTypeInternal _Leaderboard_default_instance_;
class LeaderboardScore;
class LeaderboardScoreDefaultTypeInternal;
extern LeaderboardScoreDefaultTypeInternal _LeaderboardScore_default_instance_;
}  // namespace v1
}  // namespace leaderboard
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::leaderboard::v1::Leaderboard* Arena::CreateMaybeMessage<::demo::leaderboard::v1::Leaderboard>(Arena*);
template<> ::demo::leaderboard::v1::LeaderboardScore* Arena::CreateMaybeMessage<::demo::leaderboard::v1::LeaderboardScore>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {
namespace leaderboard {
namespace v1 {

enum RankOrder : int {
  RANK_ORDER_INVALID = 0,
  RANK_ORDER_ASC = 1,
  RANK_ORDER_DESC = 2,
  RankOrder_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RankOrder_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RankOrder_IsValid(int value);
constexpr RankOrder RankOrder_MIN = RANK_ORDER_INVALID;
constexpr RankOrder RankOrder_MAX = RANK_ORDER_DESC;
constexpr int RankOrder_ARRAYSIZE = RankOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankOrder_descriptor();
template<typename T>
inline const std::string& RankOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RankOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RankOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RankOrder_descriptor(), enum_t_value);
}
inline bool RankOrder_Parse(
    const std::string& name, RankOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RankOrder>(
    RankOrder_descriptor(), name, value);
}
// ===================================================================

class Leaderboard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.Leaderboard) */ {
 public:
  Leaderboard();
  virtual ~Leaderboard();

  Leaderboard(const Leaderboard& from);
  Leaderboard(Leaderboard&& from) noexcept
    : Leaderboard() {
    *this = ::std::move(from);
  }

  inline Leaderboard& operator=(const Leaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Leaderboard& operator=(Leaderboard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Leaderboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Leaderboard* internal_default_instance() {
    return reinterpret_cast<const Leaderboard*>(
               &_Leaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Leaderboard& a, Leaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Leaderboard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Leaderboard* New() const final {
    return CreateMaybeMessage<Leaderboard>(nullptr);
  }

  Leaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Leaderboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Leaderboard& from);
  void MergeFrom(const Leaderboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Leaderboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.Leaderboard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kMaxSizeFieldNumber = 3,
    kRankOrderFieldNumber = 2,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // .google.protobuf.UInt32Value max_size = 3;
  bool has_max_size() const;
  private:
  bool _internal_has_max_size() const;
  public:
  void clear_max_size();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& max_size() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_max_size();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_max_size();
  void set_allocated_max_size(PROTOBUF_NAMESPACE_ID::UInt32Value* max_size);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_max_size() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_max_size();
  public:

  // .demo.leaderboard.v1.RankOrder rank_order = 2;
  void clear_rank_order();
  ::demo::leaderboard::v1::RankOrder rank_order() const;
  void set_rank_order(::demo::leaderboard::v1::RankOrder value);
  private:
  ::demo::leaderboard::v1::RankOrder _internal_rank_order() const;
  void _internal_set_rank_order(::demo::leaderboard::v1::RankOrder value);
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.Leaderboard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* max_size_;
  int rank_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_2eproto;
};
// -------------------------------------------------------------------

class LeaderboardScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.leaderboard.v1.LeaderboardScore) */ {
 public:
  LeaderboardScore();
  virtual ~LeaderboardScore();

  LeaderboardScore(const LeaderboardScore& from);
  LeaderboardScore(LeaderboardScore&& from) noexcept
    : LeaderboardScore() {
    *this = ::std::move(from);
  }

  inline LeaderboardScore& operator=(const LeaderboardScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardScore& operator=(LeaderboardScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderboardScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderboardScore* internal_default_instance() {
    return reinterpret_cast<const LeaderboardScore*>(
               &_LeaderboardScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LeaderboardScore& a, LeaderboardScore& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderboardScore* New() const final {
    return CreateMaybeMessage<LeaderboardScore>(nullptr);
  }

  LeaderboardScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderboardScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderboardScore& from);
  void MergeFrom(const LeaderboardScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.leaderboard.v1.LeaderboardScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_2eproto);
    return ::descriptor_table_demo_2fleaderboard_2fv1_2fleaderboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .google.protobuf.UInt32Value score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& score() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_score();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_score();
  void set_allocated_score(PROTOBUF_NAMESPACE_ID::UInt32Value* score);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_score() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_score();
  public:

  // @@protoc_insertion_point(class_scope:demo.leaderboard.v1.LeaderboardScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2fleaderboard_2fv1_2fleaderboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Leaderboard

// string leaderboard_id = 1;
inline void Leaderboard::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Leaderboard::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.Leaderboard.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void Leaderboard::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.Leaderboard.leaderboard_id)
}
inline std::string* Leaderboard::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.Leaderboard.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& Leaderboard::_internal_leaderboard_id() const {
  return leaderboard_id_.GetNoArena();
}
inline void Leaderboard::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Leaderboard::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.Leaderboard.leaderboard_id)
}
inline void Leaderboard::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.Leaderboard.leaderboard_id)
}
inline void Leaderboard::set_leaderboard_id(const char* value, size_t size) {
  
  leaderboard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.Leaderboard.leaderboard_id)
}
inline std::string* Leaderboard::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Leaderboard::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.Leaderboard.leaderboard_id)
  
  return leaderboard_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Leaderboard::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.Leaderboard.leaderboard_id)
}

// .demo.leaderboard.v1.RankOrder rank_order = 2;
inline void Leaderboard::clear_rank_order() {
  rank_order_ = 0;
}
inline ::demo::leaderboard::v1::RankOrder Leaderboard::_internal_rank_order() const {
  return static_cast< ::demo::leaderboard::v1::RankOrder >(rank_order_);
}
inline ::demo::leaderboard::v1::RankOrder Leaderboard::rank_order() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.Leaderboard.rank_order)
  return _internal_rank_order();
}
inline void Leaderboard::_internal_set_rank_order(::demo::leaderboard::v1::RankOrder value) {
  
  rank_order_ = value;
}
inline void Leaderboard::set_rank_order(::demo::leaderboard::v1::RankOrder value) {
  _internal_set_rank_order(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.Leaderboard.rank_order)
}

// .google.protobuf.UInt32Value max_size = 3;
inline bool Leaderboard::_internal_has_max_size() const {
  return this != internal_default_instance() && max_size_ != nullptr;
}
inline bool Leaderboard::has_max_size() const {
  return _internal_has_max_size();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Leaderboard::_internal_max_size() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = max_size_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Leaderboard::max_size() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.Leaderboard.max_size)
  return _internal_max_size();
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Leaderboard::release_max_size() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.Leaderboard.max_size)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = max_size_;
  max_size_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Leaderboard::_internal_mutable_max_size() {
  
  if (max_size_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaNoVirtual());
    max_size_ = p;
  }
  return max_size_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Leaderboard::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.Leaderboard.max_size)
  return _internal_mutable_max_size();
}
inline void Leaderboard::set_allocated_max_size(PROTOBUF_NAMESPACE_ID::UInt32Value* max_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_size_);
  }
  if (max_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_size)->GetArena();
    if (message_arena != submessage_arena) {
      max_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_size, submessage_arena);
    }
    
  } else {
    
  }
  max_size_ = max_size;
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.Leaderboard.max_size)
}

// -------------------------------------------------------------------

// LeaderboardScore

// string user_id = 1;
inline void LeaderboardScore::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LeaderboardScore::user_id() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.LeaderboardScore.user_id)
  return _internal_user_id();
}
inline void LeaderboardScore::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:demo.leaderboard.v1.LeaderboardScore.user_id)
}
inline std::string* LeaderboardScore::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.LeaderboardScore.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& LeaderboardScore::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void LeaderboardScore::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LeaderboardScore::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.leaderboard.v1.LeaderboardScore.user_id)
}
inline void LeaderboardScore::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.leaderboard.v1.LeaderboardScore.user_id)
}
inline void LeaderboardScore::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.leaderboard.v1.LeaderboardScore.user_id)
}
inline std::string* LeaderboardScore::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LeaderboardScore::release_user_id() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.LeaderboardScore.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderboardScore::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.LeaderboardScore.user_id)
}

// .google.protobuf.UInt32Value score = 2;
inline bool LeaderboardScore::_internal_has_score() const {
  return this != internal_default_instance() && score_ != nullptr;
}
inline bool LeaderboardScore::has_score() const {
  return _internal_has_score();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& LeaderboardScore::_internal_score() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = score_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& LeaderboardScore::score() const {
  // @@protoc_insertion_point(field_get:demo.leaderboard.v1.LeaderboardScore.score)
  return _internal_score();
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* LeaderboardScore::release_score() {
  // @@protoc_insertion_point(field_release:demo.leaderboard.v1.LeaderboardScore.score)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = score_;
  score_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* LeaderboardScore::_internal_mutable_score() {
  
  if (score_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaNoVirtual());
    score_ = p;
  }
  return score_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* LeaderboardScore::mutable_score() {
  // @@protoc_insertion_point(field_mutable:demo.leaderboard.v1.LeaderboardScore.score)
  return _internal_mutable_score();
}
inline void LeaderboardScore::set_allocated_score(PROTOBUF_NAMESPACE_ID::UInt32Value* score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(score_);
  }
  if (score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(score)->GetArena();
    if (message_arena != submessage_arena) {
      score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score, submessage_arena);
    }
    
  } else {
    
  }
  score_ = score;
  // @@protoc_insertion_point(field_set_allocated:demo.leaderboard.v1.LeaderboardScore.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace leaderboard
}  // namespace demo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::demo::leaderboard::v1::RankOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::leaderboard::v1::RankOrder>() {
  return ::demo::leaderboard::v1::RankOrder_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2fleaderboard_2fv1_2fleaderboard_2eproto
