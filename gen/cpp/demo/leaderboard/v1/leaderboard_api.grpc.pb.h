// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo/leaderboard/v1/leaderboard_api.proto
// Original file comments:
// Copyright (c) 2020 jonkight.
//
#ifndef GRPC_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto__INCLUDED
#define GRPC_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto__INCLUDED

#include "demo/leaderboard/v1/leaderboard_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace demo {
namespace leaderboard {
namespace v1 {

// Service API for interacting with leaderboards.
class LeaderboardAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "demo.leaderboard.v1.LeaderboardAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a leaderboard.
    virtual ::grpc::Status CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>> AsyncCreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>>(AsyncCreateLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>> PrepareAsyncCreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>>(PrepareAsyncCreateLeaderboardRaw(context, request, cq));
    }
    // Retrieves a leaderboard definition.
    virtual ::grpc::Status GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::demo::leaderboard::v1::GetLeaderboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>> AsyncGetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>>(AsyncGetLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>> PrepareAsyncGetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>>(PrepareAsyncGetLeaderboardRaw(context, request, cq));
    }
    // Deletes a leaderboard definition.
    virtual ::grpc::Status DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>> AsyncDeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>>(AsyncDeleteLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>> PrepareAsyncDeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>>(PrepareAsyncDeleteLeaderboardRaw(context, request, cq));
    }
    // Submit scores to a leaderboard.
    virtual ::grpc::Status SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::demo::leaderboard::v1::SubmitScoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>> AsyncSubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>>(AsyncSubmitScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>> PrepareAsyncSubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>>(PrepareAsyncSubmitScoresRaw(context, request, cq));
    }
    // Retrieves the scores from a leaderboard.
    virtual ::grpc::Status GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::demo::leaderboard::v1::GetScoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>> AsyncGetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>>(AsyncGetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>> PrepareAsyncGetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>>(PrepareAsyncGetScoresRaw(context, request, cq));
    }
    // Resets a leaderboard by removing all scores.
    virtual ::grpc::Status ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::demo::leaderboard::v1::ResetScoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>> AsyncResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>>(AsyncResetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>> PrepareAsyncResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>>(PrepareAsyncResetScoresRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a leaderboard.
      virtual void CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Retrieves a leaderboard definition.
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Deletes a leaderboard definition.
      virtual void DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Submit scores to a leaderboard.
      virtual void SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Retrieves the scores from a leaderboard.
      virtual void GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest* request, ::demo::leaderboard::v1::GetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest* request, ::demo::leaderboard::v1::GetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Resets a leaderboard by removing all scores.
      virtual void ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest* request, ::demo::leaderboard::v1::ResetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::ResetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest* request, ::demo::leaderboard::v1::ResetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::ResetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>* AsyncCreateLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::CreateLeaderboardResponse>* PrepareAsyncCreateLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>* AsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetLeaderboardResponse>* PrepareAsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>* AsyncDeleteLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::DeleteLeaderboardResponse>* PrepareAsyncDeleteLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>* AsyncSubmitScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::SubmitScoresResponse>* PrepareAsyncSubmitScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>* AsyncGetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::GetScoresResponse>* PrepareAsyncGetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>* AsyncResetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::leaderboard::v1::ResetScoresResponse>* PrepareAsyncResetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>> AsyncCreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>>(AsyncCreateLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>> PrepareAsyncCreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>>(PrepareAsyncCreateLeaderboardRaw(context, request, cq));
    }
    ::grpc::Status GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::demo::leaderboard::v1::GetLeaderboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>> AsyncGetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>>(AsyncGetLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>> PrepareAsyncGetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>>(PrepareAsyncGetLeaderboardRaw(context, request, cq));
    }
    ::grpc::Status DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>> AsyncDeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>>(AsyncDeleteLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>> PrepareAsyncDeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>>(PrepareAsyncDeleteLeaderboardRaw(context, request, cq));
    }
    ::grpc::Status SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::demo::leaderboard::v1::SubmitScoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>> AsyncSubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>>(AsyncSubmitScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>> PrepareAsyncSubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>>(PrepareAsyncSubmitScoresRaw(context, request, cq));
    }
    ::grpc::Status GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::demo::leaderboard::v1::GetScoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>> AsyncGetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>>(AsyncGetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>> PrepareAsyncGetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>>(PrepareAsyncGetScoresRaw(context, request, cq));
    }
    ::grpc::Status ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::demo::leaderboard::v1::ResetScoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>> AsyncResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>>(AsyncResetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>> PrepareAsyncResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>>(PrepareAsyncResetScoresRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLeaderboard(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLeaderboard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubmitScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::SubmitScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest* request, ::demo::leaderboard::v1::GetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void GetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void GetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest* request, ::demo::leaderboard::v1::GetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::GetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest* request, ::demo::leaderboard::v1::ResetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::ResetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetScores(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest* request, ::demo::leaderboard::v1::ResetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::leaderboard::v1::ResetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>* AsyncCreateLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::CreateLeaderboardResponse>* PrepareAsyncCreateLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>* AsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetLeaderboardResponse>* PrepareAsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>* AsyncDeleteLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::DeleteLeaderboardResponse>* PrepareAsyncDeleteLeaderboardRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>* AsyncSubmitScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::SubmitScoresResponse>* PrepareAsyncSubmitScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>* AsyncGetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::GetScoresResponse>* PrepareAsyncGetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::GetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>* AsyncResetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::leaderboard::v1::ResetScoresResponse>* PrepareAsyncResetScoresRaw(::grpc::ClientContext* context, const ::demo::leaderboard::v1::ResetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLeaderboard_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLeaderboard_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLeaderboard_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitScores_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScores_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetScores_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a leaderboard.
    virtual ::grpc::Status CreateLeaderboard(::grpc::ServerContext* context, const ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::demo::leaderboard::v1::CreateLeaderboardResponse* response);
    // Retrieves a leaderboard definition.
    virtual ::grpc::Status GetLeaderboard(::grpc::ServerContext* context, const ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::demo::leaderboard::v1::GetLeaderboardResponse* response);
    // Deletes a leaderboard definition.
    virtual ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* context, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::demo::leaderboard::v1::DeleteLeaderboardResponse* response);
    // Submit scores to a leaderboard.
    virtual ::grpc::Status SubmitScores(::grpc::ServerContext* context, const ::demo::leaderboard::v1::SubmitScoresRequest* request, ::demo::leaderboard::v1::SubmitScoresResponse* response);
    // Retrieves the scores from a leaderboard.
    virtual ::grpc::Status GetScores(::grpc::ServerContext* context, const ::demo::leaderboard::v1::GetScoresRequest* request, ::demo::leaderboard::v1::GetScoresResponse* response);
    // Resets a leaderboard by removing all scores.
    virtual ::grpc::Status ResetScores(::grpc::ServerContext* context, const ::demo::leaderboard::v1::ResetScoresRequest* request, ::demo::leaderboard::v1::ResetScoresResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLeaderboard() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLeaderboard(::grpc::ServerContext* context, ::demo::leaderboard::v1::CreateLeaderboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::CreateLeaderboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLeaderboard(::grpc::ServerContext* context, ::demo::leaderboard::v1::GetLeaderboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::GetLeaderboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLeaderboard() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLeaderboard(::grpc::ServerContext* context, ::demo::leaderboard::v1::DeleteLeaderboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::DeleteLeaderboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitScores() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitScores(::grpc::ServerContext* context, ::demo::leaderboard::v1::SubmitScoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::SubmitScoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScores() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScores(::grpc::ServerContext* context, ::demo::leaderboard::v1::GetScoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::GetScoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetScores() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetScores(::grpc::ServerContext* context, ::demo::leaderboard::v1::ResetScoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::leaderboard::v1::ResetScoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateLeaderboard<WithAsyncMethod_GetLeaderboard<WithAsyncMethod_DeleteLeaderboard<WithAsyncMethod_SubmitScores<WithAsyncMethod_GetScores<WithAsyncMethod_ResetScores<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateLeaderboard() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::CreateLeaderboardRequest, ::demo::leaderboard::v1::CreateLeaderboardResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::CreateLeaderboardRequest* request,
                 ::demo::leaderboard::v1::CreateLeaderboardResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateLeaderboard(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateLeaderboard(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::CreateLeaderboardRequest, ::demo::leaderboard::v1::CreateLeaderboardResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::CreateLeaderboardRequest, ::demo::leaderboard::v1::CreateLeaderboardResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLeaderboard() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::GetLeaderboardRequest, ::demo::leaderboard::v1::GetLeaderboardResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::GetLeaderboardRequest* request,
                 ::demo::leaderboard::v1::GetLeaderboardResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLeaderboard(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLeaderboard(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::GetLeaderboardRequest, ::demo::leaderboard::v1::GetLeaderboardResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::GetLeaderboardRequest, ::demo::leaderboard::v1::GetLeaderboardResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLeaderboard() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::DeleteLeaderboardRequest, ::demo::leaderboard::v1::DeleteLeaderboardResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::DeleteLeaderboardRequest* request,
                 ::demo::leaderboard::v1::DeleteLeaderboardResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteLeaderboard(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteLeaderboard(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::DeleteLeaderboardRequest, ::demo::leaderboard::v1::DeleteLeaderboardResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::DeleteLeaderboardRequest, ::demo::leaderboard::v1::DeleteLeaderboardResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitScores() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::SubmitScoresRequest, ::demo::leaderboard::v1::SubmitScoresResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::SubmitScoresRequest* request,
                 ::demo::leaderboard::v1::SubmitScoresResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SubmitScores(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SubmitScores(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::SubmitScoresRequest, ::demo::leaderboard::v1::SubmitScoresResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::SubmitScoresRequest, ::demo::leaderboard::v1::SubmitScoresResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetScores() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::GetScoresRequest, ::demo::leaderboard::v1::GetScoresResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::GetScoresRequest* request,
                 ::demo::leaderboard::v1::GetScoresResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetScores(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetScores(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::GetScoresRequest, ::demo::leaderboard::v1::GetScoresResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::GetScoresRequest, ::demo::leaderboard::v1::GetScoresResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetScores() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::ResetScoresRequest, ::demo::leaderboard::v1::ResetScoresResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::leaderboard::v1::ResetScoresRequest* request,
                 ::demo::leaderboard::v1::ResetScoresResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetScores(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResetScores(
        ::grpc::experimental::MessageAllocator< ::demo::leaderboard::v1::ResetScoresRequest, ::demo::leaderboard::v1::ResetScoresResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::leaderboard::v1::ResetScoresRequest, ::demo::leaderboard::v1::ResetScoresResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateLeaderboard<ExperimentalWithCallbackMethod_GetLeaderboard<ExperimentalWithCallbackMethod_DeleteLeaderboard<ExperimentalWithCallbackMethod_SubmitScores<ExperimentalWithCallbackMethod_GetScores<ExperimentalWithCallbackMethod_ResetScores<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLeaderboard() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLeaderboard() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitScores() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScores() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetScores() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLeaderboard() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLeaderboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLeaderboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLeaderboard() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLeaderboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitScores() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitScores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScores() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetScores() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetScores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateLeaderboard() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateLeaderboard(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLeaderboard() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLeaderboard(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLeaderboard(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLeaderboard() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteLeaderboard(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitScores() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SubmitScores(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitScores(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScores() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetScores(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScores(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetScores() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetScores(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetScores(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLeaderboard() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::CreateLeaderboardRequest, ::demo::leaderboard::v1::CreateLeaderboardResponse>(std::bind(&WithStreamedUnaryMethod_CreateLeaderboard<BaseClass>::StreamedCreateLeaderboard, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::CreateLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::CreateLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLeaderboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::CreateLeaderboardRequest,::demo::leaderboard::v1::CreateLeaderboardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::GetLeaderboardRequest, ::demo::leaderboard::v1::GetLeaderboardResponse>(std::bind(&WithStreamedUnaryMethod_GetLeaderboard<BaseClass>::StreamedGetLeaderboard, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::GetLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLeaderboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::GetLeaderboardRequest,::demo::leaderboard::v1::GetLeaderboardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLeaderboard() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::DeleteLeaderboardRequest, ::demo::leaderboard::v1::DeleteLeaderboardResponse>(std::bind(&WithStreamedUnaryMethod_DeleteLeaderboard<BaseClass>::StreamedDeleteLeaderboard, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLeaderboard(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::DeleteLeaderboardRequest* /*request*/, ::demo::leaderboard::v1::DeleteLeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLeaderboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::DeleteLeaderboardRequest,::demo::leaderboard::v1::DeleteLeaderboardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitScores() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::SubmitScoresRequest, ::demo::leaderboard::v1::SubmitScoresResponse>(std::bind(&WithStreamedUnaryMethod_SubmitScores<BaseClass>::StreamedSubmitScores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::SubmitScoresRequest* /*request*/, ::demo::leaderboard::v1::SubmitScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitScores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::SubmitScoresRequest,::demo::leaderboard::v1::SubmitScoresResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetScores() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::GetScoresRequest, ::demo::leaderboard::v1::GetScoresResponse>(std::bind(&WithStreamedUnaryMethod_GetScores<BaseClass>::StreamedGetScores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::GetScoresRequest* /*request*/, ::demo::leaderboard::v1::GetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::GetScoresRequest,::demo::leaderboard::v1::GetScoresResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetScores() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::leaderboard::v1::ResetScoresRequest, ::demo::leaderboard::v1::ResetScoresResponse>(std::bind(&WithStreamedUnaryMethod_ResetScores<BaseClass>::StreamedResetScores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetScores(::grpc::ServerContext* /*context*/, const ::demo::leaderboard::v1::ResetScoresRequest* /*request*/, ::demo::leaderboard::v1::ResetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetScores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::leaderboard::v1::ResetScoresRequest,::demo::leaderboard::v1::ResetScoresResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateLeaderboard<WithStreamedUnaryMethod_GetLeaderboard<WithStreamedUnaryMethod_DeleteLeaderboard<WithStreamedUnaryMethod_SubmitScores<WithStreamedUnaryMethod_GetScores<WithStreamedUnaryMethod_ResetScores<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateLeaderboard<WithStreamedUnaryMethod_GetLeaderboard<WithStreamedUnaryMethod_DeleteLeaderboard<WithStreamedUnaryMethod_SubmitScores<WithStreamedUnaryMethod_GetScores<WithStreamedUnaryMethod_ResetScores<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace leaderboard
}  // namespace demo


#endif  // GRPC_demo_2fleaderboard_2fv1_2fleaderboard_5fapi_2eproto__INCLUDED
