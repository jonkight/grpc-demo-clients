// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo/user/v1/user_api.proto
// Original file comments:
// Copyright (c) 2020 jonkight.
//
#ifndef GRPC_demo_2fuser_2fv1_2fuser_5fapi_2eproto__INCLUDED
#define GRPC_demo_2fuser_2fv1_2fuser_5fapi_2eproto__INCLUDED

#include "demo/user/v1/user_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace demo {
namespace user {
namespace v1 {

// Service API for interacting with users.
class UserAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "demo.user.v1.UserAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a user.
    virtual ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::demo::user::v1::CreateUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>> AsyncCreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    // Retrieves a user.
    virtual ::grpc::Status GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::demo::user::v1::GetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a user.
      virtual void CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Retrieves a user.
      virtual void GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::CreateUserResponse>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::user::v1::GetUserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::demo::user::v1::CreateUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>> AsyncCreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    ::grpc::Status GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::demo::user::v1::GetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a user.
    virtual ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response);
    // Retrieves a user.
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::demo::user::v1::CreateUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::user::v1::CreateUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::demo::user::v1::GetUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::demo::user::v1::GetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateUser<WithAsyncMethod_GetUser<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateUser() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::user::v1::CreateUserRequest, ::demo::user::v1::CreateUserResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::user::v1::CreateUserRequest* request,
                 ::demo::user::v1::CreateUserResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateUser(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateUser(
        ::grpc::experimental::MessageAllocator< ::demo::user::v1::CreateUserRequest, ::demo::user::v1::CreateUserResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::user::v1::CreateUserRequest, ::demo::user::v1::CreateUserResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUser() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::user::v1::GetUserRequest, ::demo::user::v1::GetUserResponse>(
          [this](::grpc::ServerContext* context,
                 const ::demo::user::v1::GetUserRequest* request,
                 ::demo::user::v1::GetUserResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetUser(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetUser(
        ::grpc::experimental::MessageAllocator< ::demo::user::v1::GetUserRequest, ::demo::user::v1::GetUserResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::user::v1::GetUserRequest, ::demo::user::v1::GetUserResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateUser<ExperimentalWithCallbackMethod_GetUser<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateUser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateUser(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetUser(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::user::v1::CreateUserRequest, ::demo::user::v1::CreateUserResponse>(std::bind(&WithStreamedUnaryMethod_CreateUser<BaseClass>::StreamedCreateUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::CreateUserRequest* /*request*/, ::demo::user::v1::CreateUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::user::v1::CreateUserRequest,::demo::user::v1::CreateUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::user::v1::GetUserRequest, ::demo::user::v1::GetUserResponse>(std::bind(&WithStreamedUnaryMethod_GetUser<BaseClass>::StreamedGetUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::demo::user::v1::GetUserRequest* /*request*/, ::demo::user::v1::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::user::v1::GetUserRequest,::demo::user::v1::GetUserResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_GetUser<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_GetUser<Service > > StreamedService;
};

}  // namespace v1
}  // namespace user
}  // namespace demo


#endif  // GRPC_demo_2fuser_2fv1_2fuser_5fapi_2eproto__INCLUDED
