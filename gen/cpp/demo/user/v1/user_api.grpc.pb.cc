// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo/user/v1/user_api.proto

#include "demo/user/v1/user_api.pb.h"
#include "demo/user/v1/user_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {
namespace user {
namespace v1 {

static const char* UserAPI_method_names[] = {
  "/demo.user.v1.UserAPI/CreateUser",
  "/demo.user.v1.UserAPI/GetUser",
};

std::unique_ptr< UserAPI::Stub> UserAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserAPI::Stub> stub(new UserAPI::Stub(channel));
  return stub;
}

UserAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateUser_(UserAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUser_(UserAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserAPI::Stub::CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::demo::user::v1::CreateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void UserAPI::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void UserAPI::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void UserAPI::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

void UserAPI::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::CreateUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>* UserAPI::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::user::v1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::user::v1::CreateUserResponse>* UserAPI::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::user::v1::CreateUserResponse>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, false);
}

::grpc::Status UserAPI::Stub::GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::demo::user::v1::GetUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void UserAPI::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserAPI::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserAPI::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

void UserAPI::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::user::v1::GetUserResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>* UserAPI::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::user::v1::GetUserResponse>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::user::v1::GetUserResponse>* UserAPI::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::demo::user::v1::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::user::v1::GetUserResponse>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, false);
}

UserAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAPI::Service, ::demo::user::v1::CreateUserRequest, ::demo::user::v1::CreateUserResponse>(
          std::mem_fn(&UserAPI::Service::CreateUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAPI::Service, ::demo::user::v1::GetUserRequest, ::demo::user::v1::GetUserResponse>(
          std::mem_fn(&UserAPI::Service::GetUser), this)));
}

UserAPI::Service::~Service() {
}

::grpc::Status UserAPI::Service::CreateUser(::grpc::ServerContext* context, const ::demo::user::v1::CreateUserRequest* request, ::demo::user::v1::CreateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAPI::Service::GetUser(::grpc::ServerContext* context, const ::demo::user::v1::GetUserRequest* request, ::demo::user::v1::GetUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo
}  // namespace user
}  // namespace v1

