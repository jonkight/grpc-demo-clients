// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo/notification/v1/notification_api.proto

#include "demo/notification/v1/notification_api.pb.h"
#include "demo/notification/v1/notification_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {
namespace notification {
namespace v1 {

static const char* NotificationApi_method_names[] = {
  "/demo.notification.v1.NotificationApi/Subscribe",
};

std::unique_ptr< NotificationApi::Stub> NotificationApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NotificationApi::Stub> stub(new NotificationApi::Stub(channel));
  return stub;
}

NotificationApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Subscribe_(NotificationApi_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::demo::notification::v1::Notification>* NotificationApi::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::demo::notification::v1::SubscribeRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::demo::notification::v1::Notification>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void NotificationApi::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, ::demo::notification::v1::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::demo::notification::v1::Notification>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::demo::notification::v1::Notification>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::demo::notification::v1::Notification>* NotificationApi::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::demo::notification::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::demo::notification::v1::Notification>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::demo::notification::v1::Notification>* NotificationApi::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::demo::notification::v1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::demo::notification::v1::Notification>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

NotificationApi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationApi_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NotificationApi::Service, ::demo::notification::v1::SubscribeRequest, ::demo::notification::v1::Notification>(
          std::mem_fn(&NotificationApi::Service::Subscribe), this)));
}

NotificationApi::Service::~Service() {
}

::grpc::Status NotificationApi::Service::Subscribe(::grpc::ServerContext* context, const ::demo::notification::v1::SubscribeRequest* request, ::grpc::ServerWriter< ::demo::notification::v1::Notification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo
}  // namespace notification
}  // namespace v1

