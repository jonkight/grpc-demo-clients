// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: demo/notification/v1/notification_api.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2020 jonkight.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Demo.Notification.V1 {
  /// <summary>
  /// Service API for receiving notifications from the platform.
  /// </summary>
  public static partial class NotificationApi
  {
    static readonly string __ServiceName = "demo.notification.v1.NotificationApi";

    static readonly grpc::Marshaller<global::Demo.Notification.V1.SubscribeRequest> __Marshaller_demo_notification_v1_SubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Notification.V1.SubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Demo.Notification.V1.Notification> __Marshaller_demo_notification_v1_Notification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Demo.Notification.V1.Notification.Parser.ParseFrom);

    static readonly grpc::Method<global::Demo.Notification.V1.SubscribeRequest, global::Demo.Notification.V1.Notification> __Method_Subscribe = new grpc::Method<global::Demo.Notification.V1.SubscribeRequest, global::Demo.Notification.V1.Notification>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_demo_notification_v1_SubscribeRequest,
        __Marshaller_demo_notification_v1_Notification);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Demo.Notification.V1.NotificationApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NotificationApi</summary>
    [grpc::BindServiceMethod(typeof(NotificationApi), "BindService")]
    public abstract partial class NotificationApiBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::Demo.Notification.V1.SubscribeRequest request, grpc::IServerStreamWriter<global::Demo.Notification.V1.Notification> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NotificationApi</summary>
    public partial class NotificationApiClient : grpc::ClientBase<NotificationApiClient>
    {
      /// <summary>Creates a new client for NotificationApi</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NotificationApiClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NotificationApi that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NotificationApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NotificationApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NotificationApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Demo.Notification.V1.Notification> Subscribe(global::Demo.Notification.V1.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Demo.Notification.V1.Notification> Subscribe(global::Demo.Notification.V1.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NotificationApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotificationApiClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NotificationApiBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationApiBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Demo.Notification.V1.SubscribeRequest, global::Demo.Notification.V1.Notification>(serviceImpl.Subscribe));
    }

  }
}
#endregion
